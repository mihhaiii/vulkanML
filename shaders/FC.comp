#version 440

layout(local_size_x_id = 0) in;             // workgroup size set with specialization constant
layout(push_constant) uniform Parameters {  // push constants
	int numNeuronsLastLayer; 
	int numNeurons; 
	int batch_size; 
	bool applyRelu;
} params;

layout(std430, binding = 0) buffer lay0 { float inputs[]; }; // array parameters
layout(std430, binding = 1) buffer lay1 { float weights[]; }; // array parameters
layout(std430, binding = 2) buffer lay2 { float biases[]; }; // array parameters
layout(std430, binding = 3) buffer lay3 { float outputs[]; }; // array parameters

void main(){
   const uint globalId = gl_GlobalInvocationID.x; 
   if(globalId >= params.numNeurons){
      return;
   }
   
   for (int s = 0; 
		s < params.batch_size;
		s++)
   {
		   float sum = biases[globalId];
		   for (int i = 0; i < params.numNeuronsLastLayer; i++){
				sum += inputs[s * params.numNeuronsLastLayer + i] * weights[i * params.numNeurons + globalId];
		   }
		   if (params.applyRelu)
			sum = max(sum, 0);
		   outputs[s * params.numNeurons + globalId] = sum;
   }
    
}
