#version 440

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in; // workgroup dimensions specialization constants
layout(push_constant) uniform Parameters {  // push constants
	int batch_size, h, w, c, filters, size, stride, padding, out_h, out_w, useBias;
} p;

layout(std430, binding = 0) buffer lay0 { float inputImage[]; }; 
layout(std430, binding = 1) buffer lay1 { float weights[]; }; 
layout(std430, binding = 2) buffer lay2 { float biases[]; }; 
layout(std430, binding = 3) buffer lay3 { float outputImage[]; };

void main(){
  const int i = int(gl_GlobalInvocationID.x);
  if (i >= p.out_h)
	return;
  const int j = int(gl_GlobalInvocationID.y);
  if (j >= p.out_w)
	return;
  const uint out_c = gl_GlobalInvocationID.z; 
  if(out_c >= p.filters)
	return;
  
  int h_offset = -p.padding / 2;
  int w_offset = -p.padding / 2;
  
 // for (int out_c = 0; out_c < p.filters; out_c++){
  
  for (int b = 0; b < p.batch_size; b++)
  {
		int startI = i * p.stride + h_offset;
		int startJ = j * p.stride + w_offset;
		float res = p.useBias != 0 ? biases[out_c] : 0;
		int endI = min(startI + p.size, p.h);
		int endJ = min(startJ + p.size, p.w);
		for (int ii = max(startI, 0); ii < endI; ii++) {
			for (int jj = max(startJ, 0); jj < endJ; jj++) {
				for (int k = 0; k < p.c; k++) {
					float imageValue = inputImage[b*p.h*p.w*p.c + ii*p.w*p.c + jj*p.c + k];
					int kI = ii - startI;
					int kJ = jj - startJ;
					float kernelValue = weights[kI*p.size*p.c*p.filters + 
						kJ*p.c*p.filters + k*p.filters + out_c];
					res += imageValue * kernelValue;
				}
			}
		}
		outputImage[b*p.out_h*p.out_w*p.filters + i*p.out_w*p.filters + j*p.filters + out_c] = res;
  }
  
//  }
  
}

