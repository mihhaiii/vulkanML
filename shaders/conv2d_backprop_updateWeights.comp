#version 440

layout(local_size_x_id = 0, local_size_y_id = 1) in; // workgroup dimensions specialization constants
layout(push_constant) uniform Parameters {  // push constants
	int batch_size, h, w, c, filters, size, stride, padding, out_h, out_w, useBias; float learning_rate;
} p;

layout(std430, binding = 0) buffer lay0 { float inputImage[]; }; 
layout(std430, binding = 1) buffer lay1 { float weights[]; }; 
layout(std430, binding = 2) buffer lay2 { float biases[]; }; 
layout(std430, binding = 3) buffer lay3 { float derivatives[]; };

void main(){
  const int k = int(gl_GlobalInvocationID.x); // input channel
  if(k >= p.c){
      return;
  }
  const uint f = gl_GlobalInvocationID.y; // output channel
  if(f >= p.filters){
      return;
  }
  
  int h_offset = -p.padding / 2;
  int w_offset = -p.padding / 2;
  
 
		
	// update weights and biases
	for (int i = 0; i < p.size; i++) {
		for (int j = 0; j < p.size; j++) {
					float deriv = 0;
					for (int b = 0; b < p.batch_size; b++) {
						for (int ii = 0; ii < p.out_h; ii++) {
							for (int jj = 0; jj < p.out_w; jj++) {
								int startI = ii * p.stride + h_offset;
								int startJ = jj * p.stride + w_offset;
								startI += i;
								startJ += j;
								//if (startI < 0 || startJ < 0 || startI >= p.h || startJ >= p.w)
								//	continue;
								deriv += derivatives[b * p.out_h * p.out_w * p.filters + ii * p.out_w * p.filters + jj * p.filters + f] *
									inputImage[b * p.h * p.w * p.c + startI * p.w * p.c + startJ * p.c + k];
							}
						}
					}					
					weights[i * p.size * p.c * p.filters + j * p.c * p.filters + k * p.filters + f] -= p.learning_rate * deriv;
		}
	}

	float deriv = 0;
	for (int b = 0; b < p.batch_size; b++) {
		for (int ii = 0; ii < p.out_h; ii++) {
			for (int jj = 0; jj < p.out_w; jj++) {
				deriv += derivatives[b * p.out_h * p.out_w * p.filters + ii * p.out_w * p.filters + jj * p.filters + f];
			}
		}
	}
	biases[f] -= p.learning_rate * deriv;
  
  
}

